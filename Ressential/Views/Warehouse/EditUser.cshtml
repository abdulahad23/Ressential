@model Ressential.Models.User
@using Ressential.Utilities

@{
    ViewBag.Title = "Update User";
    Layout = "~/Views/Shared/_WarehouseLayout.cshtml";
}

<div class="row">
    <div class="col-12 grid-margin">
        <div class="card">
            <div class="card-body">
                @if (TempData["ErrorMessage"] != null)
                {
                    <div class="alert alert-danger">
                        @TempData["ErrorMessage"]
                    </div>
                }
                @if (TempData["SuccessMessage"] != null)
                {
                    <div class="alert alert-success">
                        @TempData["SuccessMessage"]
                    </div>
                }
                <h2 class="text-secondary"><b>Update User</b></h2>

                @using (Html.BeginForm("EditUser", "Warehouse", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    <div class="row">
                        @Html.HiddenFor(model => model.UserId)
                        <div class="col-md-6">
                            <div class="form-floating mb-3 mt-3">
                                @Html.TextBoxFor(model => model.UserName, new { @class = "form-control", placeholder = "Username" })
                                <label for="floatingInput">Username</label>
                                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })

                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-floating mb-3 mt-3">
                                @Html.TextBoxFor(model => model.Email, new { @class = "form-control", placeholder = "Email", @readonly = "readonly" })
                                <label for="floatingInput">Email</label>
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-floating mb-3 mt-3">
                                @Html.PasswordFor(model => model.Password, new { @class = "form-control", id = "Password", placeholder = "Password" })
                                <label for="floatingInput">Password</label>
                                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })

                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-floating mb-3 mt-3">
                                <input type="password" class="form-control" id="ConfirmPassword" name="ConfirmPassword" placeholder="Confirm Password">
                                <label for="ConfirmPassword">Confirm Password</label>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-floating mb-3 mt-3">
                                @Html.DropDownListFor(model => model.RoleId, new SelectList(ViewBag.Roles, "RoleId", "RoleName"), "Select Role", new { @class = "form-control" })
                                <label for="floatingInput">Role</label>
                                @Html.ValidationMessageFor(model => model.RoleId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-floating mb-3 mt-3">
                                @Html.DropDownListFor(m => m.IsActive, new SelectList(new[] {
                                new { Value = true, Text = "Active" },
                                new { Value = false, Text = "Inactive" }
                            }, "Value", "Text"), new { @class = "form-control" })
                                <label for="Status">Status</label>
                            </div>
                        </div>

                        <h2 class="text-secondary mt-3"><b>Warehouse & Branch Access</b></h2>
                        <div class="col-md-12">
                            <div class="form-check form-switch pe-1 pb-2 mt-2">
                                @Html.CheckBoxFor(m => m.HasWarehousePermission, new { @class = "form-check-input", role = "switch", id = "HasWarehousePermission" })
                                <label class="form-check-label" for="HasWarehousePermission">Warehouse Permission</label>
                            </div>
                            @foreach (var branch in ViewBag.Branches)
                            {
                                <div class="form-check form-switch pe-1 pb-2">
                                    <input type="checkbox" class="form-check-input" id="branch_@branch.BranchId" name="BranchPermissions" value="@branch.BranchId" @(ViewBag.UserBranchPermissions.Contains(branch.BranchId) ? "checked" : "")>
                                    <label class="form-check-label" for="branch_@branch.BranchId">@branch.BranchName</label>
                                </div>
                            }
                        </div>

                        <h2 class="text-secondary mt-3"><b>Profile Image</b></h2>
                        <div class="col-md-6">
                            <div class="form-floating mb-3 mt-3">
                                <input type="file" id="ProfileImage" name="ProfileImage" accept="image/*" class="form-control" style="padding:20px !important;" />
                            </div>
                        </div>
                        <p></p>
                        <div class="col-md-6">
                            <div class="form-floating mb-3 position-relative" style="display: inline-block;">
                                <img id="imagePreview"
                                     src="@(!string.IsNullOrEmpty(Model?.ProfileImage) ? Url.Content(Ressential.Models.TextConstraints.ProfileImagesPath + Model.ProfileImage) : Url.Content(Ressential.Models.TextConstraints.NoImagesPath))"
                                     alt="Preview" class="img-thumbnail" style="max-height: 200px; width:auto; display: block; position: relative;" />
                                <button type="button" id="removeImage" class="btn btn-danger btn-sm"
                                        style="position: absolute; top: 5px; right: 5px; padding: 2px 6px; border-radius: 50%; line-height: 1; display: none;">
                                    &times;
                                </button>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <div class="col-sm-9">
                                        <button type="submit" class="btn btn-secondary mr-2 ps-4 pe-4">Update</button>
                                        <a href="@Url.Action("UserList","Warehouse")" class="btn btn-light ms-1 ps-4 pe-4">Cancel</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<script>
    // Function to check image status on page load
    window.addEventListener('load', function () {
        const preview = document.getElementById('imagePreview');
        const removeButton = document.getElementById('removeImage');

        // Display the remove button if the image preview has a valid source
        if (preview.src && !preview.src.includes('NoImagesPath')) {
            removeButton.style.display = 'block';
        }
    });

    // Handle file selection
    document.getElementById('ProfileImage').addEventListener('change', function (event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                const preview = document.getElementById('imagePreview');
                preview.src = e.target.result;
                preview.style.display = 'block';
                document.getElementById('removeImage').style.display = 'block';
            };
            reader.readAsDataURL(file);
        }
    });

    // Handle remove button click
    document.getElementById('removeImage').addEventListener('click', function () {
        const preview = document.getElementById('imagePreview');
        preview.src = '';
        preview.style.display = 'none';
        document.getElementById('ProfileImage').value = '';
        this.style.display = 'none';
    });

</script>
