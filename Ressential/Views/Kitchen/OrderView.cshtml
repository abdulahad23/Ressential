@{
    ViewBag.Title = "OrderView";
    Layout = "~/Views/Shared/_KitchenLayout.cshtml";
}

<div class="row">
    <div class="col-12 grid-margin">
        <div class="card">
            <div class="card-body">
                @if (TempData["ErrorMessage"] != null)
                {
                    <div class="alert alert-danger">
                        @TempData["ErrorMessage"]
                    </div>
                }
                @if (TempData["SuccessMessage"] != null)
                {
                    <div class="alert alert-success">
                        @TempData["SuccessMessage"]
                    </div>
                }
                <h2 class="text-center text-5xl text-secondary">Orders View</h2>
                <div class="row mb-4">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="statusSelect">Select Status</label>
                            <select id="statusSelect" class="form-control" multiple="multiple">
                                <option value="Pending">Pending</option>
                                <option value="Preparing">Preparing</option>
                                <option value="Ready">Ready</option>
                                <option value="Out for Delivery">Out for Delivery</option>
                                <option value="Completed">Completed</option>
                                <option value="Cancelled">Cancelled</option>
                                <option value="Returned">Returned</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="orderTypeSelect">Select Order Type</label>
                            <select id="orderTypeSelect" class="form-control" multiple="multiple">
                                <option value="DineIn">Dine In</option>
                                <option value="TakeAway">Take Away</option>
                                <option value="Online">Online</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div id="orderCards" class="row border-2" style="background-color: #e0e0e0; padding: 20px;">
                    <!-- Order cards will be appended here -->
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />
    <script src="~/Scripts/jquery.signalR-2.4.3.min.js"></script>
    <script src="~/signalr/hubs"></script>
    <script>
        var ressentialHub;

        $(document).ready(function () {
            // Initialize SignalR
            ressentialHub = $.connection.ressentialHub;
            
            // Define the updateOrderView callback
            ressentialHub.client.updateOrderView = function () {
                loadOrders();
            };

            // Start the SignalR connection
            $.connection.hub.start().done(function () {
                ressentialHub.server.saveUserConnection();
                console.log('SignalR Connected');
            });

            // Initialize select2 for both dropdowns
            $('#statusSelect, #orderTypeSelect').select2({
                width: '100%',
                placeholder: 'Select options'
            });

            // Set default selected statuses
            $('#statusSelect').val(['Pending', 'Preparing', 'Ready', 'Out for Delivery']).trigger('change');

            // Add change event handler for both dropdowns
            $('#statusSelect, #orderTypeSelect').on('change', function() {
                loadOrders();
            });

            loadOrders();
        });

        function loadOrders() {
            var selectedStatuses = $('#statusSelect').val() || [];
            var selectedOrderTypes = $('#orderTypeSelect').val() || [];
            
            $.ajax({
                url: '@Url.Action("GetOrders", "Kitchen")',
                type: 'GET',
                traditional: true,
                data: { 
                    statuses: selectedStatuses,
                    orderTypes: selectedOrderTypes
                },
                success: function (data) {
                    $('#orderCards').empty();
                    var filteredOrders = data.orders;
                    
                    if (selectedOrderTypes.length > 0) {
                        filteredOrders = filteredOrders.filter(order => selectedOrderTypes.includes(order.OrderType));
                    }

                    $.each(filteredOrders, function (index, order) {
                        var orderStatusBadge = '';
                        if (order.Status === 'Pending') {
                            orderStatusBadge = `<span class="badge badge-primary badge-status">Pending</span>`;
                        } else if (order.Status === 'Preparing') {
                            orderStatusBadge = `<span class="badge badge-warning badge-status">Preparing</span>`;
                        } else if (order.Status === 'Ready') {
                            orderStatusBadge = `<span class="badge badge-success badge-status">Ready</span>`;
                        } else if (order.Status === 'Cancelled') {
                            orderStatusBadge = `<span class="badge badge-danger badge-status">Cancelled</span>`;
                        } else if (order.Status === 'Returned') {
                            orderStatusBadge = `<span class="badge badge-danger badge-status">Returned</span>`;
                        } else if (order.Status === 'Completed') {
                            orderStatusBadge = `<span class="badge badge-info badge-status">Completed</span>`;
                        } else if (order.Status === 'Out for Delivery') {
                            orderStatusBadge = `<span class="badge badge-info badge-status">Out for Delivery</span>`;
                        }

                        var productsList = '';
                        $.each(order.OrderDetails, function (index, product) {
                            var productStatusBadge = '';
                            if (product.ProductStatus === 'Pending') {
                                productStatusBadge = `<span class="badge badge-primary badge-status">Pending</span>`;
                            } else if (product.ProductStatus === 'Preparing') {
                                productStatusBadge = `<span class="badge badge-warning badge-status">Preparing</span>`;
                            } else if (product.ProductStatus === 'Ready') {
                                productStatusBadge = `<span class="badge badge-success badge-status">Ready</span>`;
                            } else if (product.ProductStatus === 'Cancelled') {
                                productStatusBadge = `<span class="badge badge-danger badge-status">Cancelled</span>`;
                            } else if (product.ProductStatus === 'Completed') {
                                productStatusBadge = `<span class="badge badge-info badge-status">Completed</span>`;
                            }

                            productsList += `
                                <li class="list-group-item d-flex justify-content-between align-items-center flex-column flex-md-row">
                                    <span class="product-name">${product.ProductName}</span>
                                    <span class="product-qty-status">
                                        <span class="product-qty">Qty: ${product.ProductQuantity}</span>
                                        ${productStatusBadge}
                                    </span>
                                </li>`;
                        });

                        var actionButtons = '';
                        if (order.Status === 'Pending' || order.Status === 'Preparing' || order.Status === 'Ready' || order.Status === 'Out for Delivery') {
                            actionButtons = `
                                <button class="btn btn-danger btn-sm action-btn" onclick="updateOrderStatus(${order.OrderId}, 'Cancelled')"><i class="fas fa-times-circle"></i> Cancel</button>
                                <button class="btn btn-success btn-sm action-btn" onclick="updateOrderStatus(${order.OrderId}, 'Completed')"><i class="fas fa-check-circle"></i> Completed</button>`;
                        }
                        if (order.OrderType === 'Online' && order.Status === 'Pending') {
                            actionButtons = `
                                <button class="btn btn-danger btn-sm action-btn" onclick="updateOrderStatus(${order.OrderId}, 'Cancelled')"><i class="fas fa-times-circle"></i> Cancel</button>
                                <button class="btn btn-primary btn-sm action-btn" onclick="updateOrderStatus(${order.OrderId}, 'Confirm')"><i class="fas fa-check-circle"></i> Confirm</button>`;
                        }
                        if (order.OrderType === 'Online' && (order.Status === 'Preparing' || order.Status === 'Ready')) {
                            actionButtons = `
                                <button class="btn btn-danger btn-sm action-btn" onclick="updateOrderStatus(${order.OrderId}, 'Cancelled')"><i class="fas fa-times-circle"></i> Cancel</button>
                                <button class="btn btn-info btn-sm action-btn" onclick="updateOrderStatus(${order.OrderId}, 'Out for Delivery')"><i class="fas fa-truck"></i> Out for Delivery</button>`;
                        }
                        if (order.OrderType === 'Online' && order.Status === 'Out for Delivery') {
                            actionButtons = `
                                <button class="btn btn-danger btn-sm action-btn" onclick="updateOrderStatus(${order.OrderId}, 'Cancelled')"><i class="fas fa-times-circle"></i> Cancel</button>
                                <button class="btn btn-success btn-sm action-btn" onclick="updateOrderStatus(${order.OrderId}, 'Completed')"><i class="fas fa-check-circle"></i> Completed</button>`;
                        }
                        if (order.Status === 'Completed') {
                            actionButtons = `
                                <button class="btn btn-warning btn-sm action-btn" onclick="updateOrderStatus(${order.OrderId}, 'Returned')"><i class="fas fa-undo"></i> Return</button>`;
                        }

                        var card = `
                            <div class="col-12 col-sm-6 col-md-4 col-lg-3 d-flex align-items-stretch">
                                <div class="card mb-4 shadow fixed-width-card" style="background-color: white; padding: 15px;">
                                    <div class="card-body">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <h5 class="card-title">Order No: ${order.OrderNo}</h5>
                                            ${orderStatusBadge}
                                        </div>
                                        <p class="card-text">Order Type: ${order.OrderType}</p>
                                        <p class="card-text">Table No: ${order.TableNo}</p>
                                        <ul class="list-group mt-3">
                                            ${productsList}
                                        </ul>
                                        <div class="mt-3 d-flex justify-content-center">
                                            ${actionButtons}
                                        </div>
                                    </div>
                                </div>
                            </div>`;
                        $('#orderCards').append(card);
                    });
                }
            });
        }

        function updateOrderStatus(orderId, status) {
            $.ajax({
                url: '@Url.Action("UpdateOrderStatus", "Kitchen")',
                type: 'POST',
                data: { orderId: orderId, status: status },
                success: function (response) {
                    if (response.success) {
                        loadOrders();
                    }
                    else {
                        alert(@TempData["ErrorMessage"])
                    }   
                }
            });
        }
    </script>
    <style>
        .badge-status {
            font-size: 12px;
            padding: 0.25em 0.5em;
            position: relative;
        }

        .badge-primary {
            background-color: #007bff;
        }

        .badge-warning {
            background-color: #ffc107;
        }

        .badge-success {
            background-color: #28a745;
        }

        .badge-danger {
            background-color: #dc3545;
        }

        .badge-info {
            background-color: #17a2b8;
        }

        .card {
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        .fixed-width-card {
            width: 350px; /* Set a fixed width for the cards */
        }

        .product-name {
            flex-grow: 1;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .product-qty-status {
            display: flex;
            align-items: center;
            flex-shrink: 0;
        }

        .product-qty {
            margin-right: 10px;
        }

        .action-btn {
            flex: 1;
            margin: 0 5px;
        }

        /* Select2 Basic Styling */
        .select2-container .select2-selection--multiple {
            min-height: 38px;
        }

        .select2-container--default .select2-selection--multiple {
            border: 1px solid #ced4da;
            border-radius: 4px;
        }

        .select2-container--default .select2-selection--multiple .select2-selection__rendered {
            padding: 0 8px;
        }

        .select2-container--default .select2-search--inline .select2-search__field {
            margin-top: 7px;
        }
    </style>
}
