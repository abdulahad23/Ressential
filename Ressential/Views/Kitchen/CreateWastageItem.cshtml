@model Ressential.Models.WastageItem

@{
    ViewBag.Title = "CreateWastageItem";
    Layout = "~/Views/Shared/_KitchenLayout.cshtml";
    var wastageItemDetails = Model.WastageItemDetails.ToList();
}

@using (Html.BeginForm("CreateWastageItem", "Kitchen", FormMethod.Post, new { id = "wastageItemForm" }))
{
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-12 grid-margin">
            <div class="card">
                <div class="card-body">
                    @if (TempData["ErrorMessage"] != null)
                    {
                        <div class="alert alert-danger">
                            <i class="fa fa-exclamation-triangle pe-3" aria-hidden="true"></i>
                            @TempData["ErrorMessage"]
                        </div>
                    }
                    @if (TempData["SuccessMessage"] != null)
                    {
                        <div class="alert alert-success">
                            <i class="fa fa-check pe-3" aria-hidden="true"></i>
                            @TempData["SuccessMessage"]
                        </div>
                    }
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <h2 class="text-secondary"><b>Create Wastage Item</b></h2>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-floating mb-3 mt-3">
                                @Html.TextBoxFor(model => model.WastageItemDate, DateTime.Today.ToString("yyyy-MM-dd"), new { @class = "form-control", @placeholder = "Wastage Date", @type = "date" })
                                <label for="WastageDate">Wastage Date</label>
                                @Html.ValidationMessageFor(model => model.WastageItemDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="form-floating mb-3 mt-3">
                                @Html.TextBoxFor(model => model.Description, "", new { @class = "form-control", @placeholder = "Description" })
                                <label for="Description">Description</label>
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <h2 class="text-secondary pt-3"><b>Items</b></h2>
                        <div class="row">
                            <div class="container">
                                <span class="text-danger" id="itemsError"></span>
                                <div class="table-responsive tab-content">
                                    <table id="itemsTable" class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th>Item</th>
                                                <th>Description</th>
                                                <th>Quantity</th>
                                                <th></th>
                                            </tr>
                                        </thead>
                                        <tbody id="itemsTableBody">
                                            @for (int i = 0; i < wastageItemDetails.Count; i++)
                                            {
                                                <tr class="item-row">
                                                    <td class="tbl-min-width-6 col-3 mb-3 mt-3">
                                                        <div class="form-floating">
                                                            @Html.DropDownListFor(m => wastageItemDetails[i].ItemId,
                                                                new SelectList(ViewBag.Items, "ItemId", "Item.ItemName", wastageItemDetails[i].ItemId),
                                                                "Select Item", new { @class = "form-control item-select", @name = $"WastageItemDetails[{i}].ItemId" })
                                                            <label>Item</label>
                                                        </div>
                                                    </td>
                                                    <td class="tbl-min-width-6 col-3 mb-3 mt-3">
                                                        <div class="form-floating">
                                                            @Html.TextBoxFor(m => wastageItemDetails[i].Description, new { @class = "form-control", @placeholder = "Description", @name = $"WastageItemDetails[{i}].Description" })
                                                            <label>Description</label>
                                                        </div>
                                                    </td>
                                                    <td class="tbl-min-width-4 col-2 mb-3 mt-3">
                                                        <div class="form-floating">
                                                            @Html.TextBoxFor(m => wastageItemDetails[i].ItemQuantity, new { @class = "form-control quantity", @placeholder = "Quantity", @type = "number", @min = "1", @name = $"WastageItemDetails[{i}].ItemQuantity" })
                                                            <label>Quantity</label>
                                                        </div>
                                                    </td>
                                                    <td class="tbl-min-width-1">
                                                        <button class="btn btn-danger btn-sm rounded-2 m-2 removeRowBtn"
                                                                type="button" data-toggle="tooltip" data-placement="top"
                                                                title="Remove">
                                                            <i class="fa fa-times"></i>
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>

                                <!-- Add Row Button -->
                                <button class="btn btn-light-success btn-sm rounded-0 ms-3 mb-3" id="addRowBtn"
                                        type="button">
                                    <i class="fa fa-plus-square d-flex p-1">
                                        <span class="ps-2 m-0">Add More</span>
                                    </i>
                                </button>
                            </div>
                            <div class="row mt-5">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <div class="col-sm-9">
                                                <button id="CreateWastageItem" type="submit"
                                                        class="btn btn-secondary mr-2 ps-4 pe-4">
                                                    Save
                                                </button>
                                                <a href="@Url.Action("WastageItemList", "Kitchen")" class="btn btn-light ms-1 ps-4 pe-4">Cancel</a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    
    <script>
        $(document).ready(function () {
            // Enable client-side validation
            $.validator.unobtrusive.parse("#wastageItemForm");

            // Add row when clicking "Add More"
            $('#addRowBtn').click(function () {
                let index = $('#itemsTableBody .item-row').length;
                let newRow = $('#itemsTableBody .item-row').first().clone();
                
                // Clear input values and update indices
                newRow.find("input, select").val("").each(function() {
                    let name = $(this).attr('name');
                    if (name) {
                        name = name.replace(/\[\d+\]/, '[' + index + ']');
                        $(this).attr('name', name).attr('id', name);
                    }
                });

                // Clear validation messages
                newRow.find('.text-danger').remove();
                newRow.find('.input-validation-error').removeClass('input-validation-error');

                $('#itemsTableBody').append(newRow);
                
                // Re-parse validation for the new row
                $.validator.unobtrusive.parse("#wastageItemForm");
            });

            // Remove row when clicking the remove button
            $(document).on('click', '.removeRowBtn', function () {
                if ($('#itemsTableBody .item-row').length > 1) {
                    $(this).closest('.item-row').remove();
                    $(this).tooltip('dispose');
                    
                    // Reindex remaining rows
                    $('#itemsTableBody .item-row').each(function(index) {
                        $(this).find('input, select').each(function() {
                            let name = $(this).attr('name');
                            if (name) {
                                name = name.replace(/\[\d+\]/, '[' + index + ']');
                                $(this).attr('name', name).attr('id', name);
                            }
                        });
                    });
                } else {
                    alert("At least one item is required.");
                }
            });

            // Custom validation for duplicate items
            $.validator.addMethod("noDuplicateItems", function(value, element) {
                let items = [];
                let hasDuplicate = false;
                
                $('.item-select').each(function() {
                    let val = $(this).val();
                    if (val && val !== "0") {
                        if (items.includes(val)) {
                            hasDuplicate = true;
                            return false;
                        }
                        items.push(val);
                    }
                });
                
                return !hasDuplicate;
            }, "Duplicate items are not allowed in the wastage item.");

            // Form submit handler
            $("#wastageItemForm").on("submit", function (e) {
                e.preventDefault();
                let isValid = true;
                let errorMessage = "";

                // Check if all items are selected
                $('#itemsTableBody .item-row').each(function () {
                    let itemId = $(this).find('.item-select').val();
                    let quantity = $(this).find('.quantity').val();

                    if (itemId === "0" || itemId === "") {
                        isValid = false;
                        errorMessage = "Please select an item for each row.";
                        return false;
                    }

                    if (!quantity || quantity <= 0) {
                        isValid = false;
                        errorMessage = "Quantity must be greater than 0 for all items.";
                        return false;
                    }
                });

                if (!isValid) {
                    $('#itemsError').text(errorMessage);
                    return false;
                }

                // Check for duplicate items
                if (!$.validator.methods.noDuplicateItems.call(this)) {
                    $('#itemsError').text("Duplicate items are not allowed in the wastage item.");
                    return false;
                }

                // If all validations pass, submit the form
                if ($(this).valid()) {
                    this.submit();
                } else {
                    $('#itemsError').text("Please fix the validation errors before submitting.");
                }
            });

            // Add custom validation rules
            $("#wastageItemForm").validate({
                rules: {
                    "WastageItemDate": "required",
                    "Description": {
                        maxlength: 255
                    },
                    ".item-select": {
                        required: true,
                        noDuplicateItems: true
                    },
                    ".quantity": {
                        required: true,
                        min: 1
                    }
                },
                messages: {
                    "WastageItemDate": "Wastage Date is required",
                    "Description": {
                        maxlength: "Description cannot exceed 255 characters"
                    }
                },
                errorPlacement: function(error, element) {
                    error.addClass('text-danger');
                    error.insertAfter(element.closest('.form-floating'));
                }
            });
        });
    </script>
}

